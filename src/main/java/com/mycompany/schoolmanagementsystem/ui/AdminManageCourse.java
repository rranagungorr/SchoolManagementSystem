/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.schoolmanagementsystem.ui;

import com.mycompany.schoolmanagementsystem.examsys.DAO.DepartmentDAO;
import com.mycompany.schoolmanagementsystem.examsys.DAO.FieldDAO;
import com.mycompany.schoolmanagementsystem.examsys.DAO.InstructorDAO;
import com.mycompany.schoolmanagementsystem.management.Course;
import com.mycompany.schoolmanagementsystem.management.Department;
import com.mycompany.schoolmanagementsystem.management.Field;
import com.mycompany.schoolmanagementsystem.management.Instructor;
import com.mycompany.schoolmanagementsystem.service.AdminService;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author PC
 */
public class AdminManageCourse extends javax.swing.JPanel implements IPage {

    private DefaultListModel<Department> deptListModel;
    private DefaultTableModel tableModel;
    private DepartmentDAO departmentDAO;

    // Service or DAO
    private AdminService adminService;

    /**
     * Creates new form AdminManageCourse
     */
    public AdminManageCourse() {
        initComponents();
        this.departmentDAO = new DepartmentDAO();
        this.adminService = new AdminService();
        deptListModel = new DefaultListModel<>();
        departmentList.setModel(deptListModel);
        departmentList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        String[] columnNames = {"Course ID", "Course Name", "Instructor", "Department"};
        tableModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // make the table read-only
            }
        };

        coursesTable.setModel(tableModel);
        coursesTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    private void loadDepartments() {
        // 1) Retrieve the list of all departments
        List<Department> departmentList = departmentDAO.getAll();

        // 2) Clear any existing data in the list model
        deptListModel.clear();

        // 3) Add each Department to the model
        for (Department dept : departmentList) {
            deptListModel.addElement(dept);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        departmentList = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        addCourse = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        courseNameField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        instructorComboBox = new javax.swing.JComboBox<>();
        deketeCourse = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        coursesTable = new javax.swing.JTable();

        jScrollPane2.setViewportView(departmentList);

        jLabel2.setText("Department:");

        addCourse.setText("Add Course");
        addCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCourseActionPerformed(evt);
            }
        });

        jLabel4.setText("Instructor name:");

        jLabel6.setText("course name:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(courseNameField)
                            .addComponent(instructorComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(addCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 3, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(instructorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courseNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        deketeCourse.setText("Delete Course");
        deketeCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deketeCourseActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("MANAGE COURSES");

        coursesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(coursesTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(93, 93, 93)
                .addComponent(deketeCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(215, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(deketeCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(86, 86, 86))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void deketeCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deketeCourseActionPerformed
        // TODO add your handling code here:
        int selectedRow = coursesTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a course from the table.");
            return;
        }

        int courseID = (int) tableModel.getValueAt(selectedRow, 0);
        int confirm = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete course ID " + courseID + "?",
                "Confirm Deletion",
                JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            boolean success = adminService.deleteCourse(courseID);
            if (success) {
                JOptionPane.showMessageDialog(this, "Course deleted successfully!");
                loadCourses();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to delete course.");
            }
        }
    }//GEN-LAST:event_deketeCourseActionPerformed

    private void addCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCourseActionPerformed
        // TODO add your handling code here:
        // 1) Eğitmeni (Instructor) seçtik mi?
        Instructor selectedInstructor = (Instructor) instructorComboBox.getSelectedItem();
        if (selectedInstructor == null) {
            JOptionPane.showMessageDialog(this, "Please select an instructor.");
            return;
        }

        // 2) Ders adı
        String courseName = courseNameField.getText().trim();
        if (courseName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a course name.");
            return;
        }

        // 3) Departman seçimi
        Department selectedDeptItem = departmentList.getSelectedValue();
        if (selectedDeptItem == null) {
            JOptionPane.showMessageDialog(this, "Please select a department.");
            return;
        }

        // 4) Eğitmen ve Departman ID'si
        int instructorID = selectedInstructor.getInstructorID();
        int deptID = selectedDeptItem.getDepartmentID();

        // 5) Rastgele CourseCode üretelim
        // (Gerçek projede DB'deki varlığı kontrol edebilirsiniz.)
        String autoCourseCode = generateRandomCourseCode();

        // 6) Credits de sabit bir değer atayabilir veya formdan alabilirsiniz.
        // Örnek olarak 3 sabit kullanıyoruz (UI'dan gelen bir textField de olabilir).
        int credits = 3;

        // 7) adminService ile ekleme
        int newCourseID = adminService.createCourse(
                courseName,
                autoCourseCode, // Rastgele
                credits,
                deptID,
                instructorID
        );

        if (newCourseID > 0) {
            JOptionPane.showMessageDialog(this,
                    "Course added successfully!\nID=" + newCourseID
                    + "\nGenerated Code: " + autoCourseCode);

            // 8) Tabloyu/ listeyi yenile
            loadCourses();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add course.");
        }
    }//GEN-LAST:event_addCourseActionPerformed

    private String generateRandomCourseCode() {
        // Yöntem A: "CRS" + timestamp + 4 haneli random
        long now = System.currentTimeMillis();
        int rand4 = (int) (Math.random() * 9000 + 1000); // 1000-9999 arası
        return "CODE" + now + "_" + rand4;

        // Yöntem B: Kısa UUID
        // return "CODE_" + UUID.randomUUID().toString().substring(0, 8);
        // Yöntem C: Daha karmaşık bir algoritma
    }

    private void loadInstructors() {
        // Clear existing items
        var instDAO = new InstructorDAO();
        instructorComboBox.removeAllItems();

        // Retrieve from your service (or DAO) 
        List<Instructor> instructorList = instDAO.getAll();
        for (Instructor i : instructorList) {
            instructorComboBox.addItem(i);
        }

        // Optionally set a selected index if needed
        instructorComboBox.setSelectedIndex(0);
    }

    /**
     * Loads courses from the database and populates the table.
     */
    private void loadCourses() {
        tableModel.setRowCount(0);

        List<Course> allCourses = adminService.getAllCourses();
        for (Course c : allCourses) {
            String instructorFullName = getInstructorFullName(c.getInstructorID());
            String deptName = getDepartmentNameByFieldID(c.getFieldID());
            Object[] rowData = {
                c.getCourseID(),
                c.getCourseName(),
                instructorFullName,
                deptName
            };
            tableModel.addRow(rowData);
        }
    }

    // Example helper
    private String getInstructorFullName(Integer instructorID) {
        var instDAO = new InstructorDAO();
        if (instructorID == null) {
            return "N/A";
        }
        Instructor instructor = instDAO.getByID(instructorID);
        if (instructor != null) {
            return instructor.getName() + " " + instructor.getSurname();
        }
        return "Unknown";
    }

    private String getDepartmentNameByFieldID(int fieldID) {
        var fDAO = new FieldDAO();
        Field field = fDAO.getByID(fieldID);
        if (field != null) {
            Department d = adminService.getDepartmentByID(field.getDepartmentID());
            return (d != null) ? d.getDepartmentName() : "Unknown";
        }
        return "N/A";
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCourse;
    private javax.swing.JTextField courseNameField;
    private javax.swing.JTable coursesTable;
    private javax.swing.JButton deketeCourse;
    private javax.swing.JList<Department> departmentList;
    private javax.swing.JComboBox<Instructor> instructorComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onPageSetted() {
        loadInstructors();
        loadDepartments();
        loadCourses();
    }
}
